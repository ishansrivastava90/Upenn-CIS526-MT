#!/usr/bin/env python
import optparse
import sys
from collections import defaultdict
import numpy as np
import cv2
import math
import operator

def classify_svm(source, target, train_feat, test_feat, train_score, svm_params=None):

    # Default SVM Params
    if svm_params is None:
        svm_params = dict( kernel_type = cv2.SVM_SIGMOID, svm_type = cv2.SVM_C_SVC, C=1, gamma=0.00099)

    #Set the weights
    weights = []

    train_data = np.asarray(train_feat).astype(np.float32)
    train_label = np.asarray(train_score).astype(np.float32)

    svm = cv2.SVM()
    svm.train(train_data,train_label,params=svm_params)
    svm.save('svm_data.dat')

    test_data = np.asarray(test_feat).astype(np.float32)
    res = svm.predict_all(test_data)

    for i in res:
	print int(i[0])


if __name__=="__main__":
    optparser = optparse.OptionParser()
    optparser.add_option("-c", "--score", dest="score_train", default="data-train/es-en_score.train", help="Score train set")
    optparser.add_option("-s", "--source", dest="source_train", default="data-train/es-en_source.train", help="Scourse train set")
    optparser.add_option("-t", "--target", dest="target_train", default="data-train/es-en_target.train", help="Target train set")
    optparser.add_option("-f", "--features", dest="feature_train", default="data-train/train_features", help="Feature train set")
    optparser.add_option("-q", "--test_features", dest="feature_test", default="data-test/test_features", help="Feature test set")

    (opts, _) = optparser.parse_args()

    score = [[float(s.strip())] for s in open(opts.score_train).readlines()]
    source = [s.strip() for s in open(opts.source_train).readlines()]
    target = [s.strip() for s in open(opts.target_train).readlines()]
    features = [[f for f in s.strip().split()[:3]]+[f for f in s.strip().split()[3:8]] for s in open(opts.feature_train).readlines()]
    test_features = [[f for f in s.strip().split()[:3]]+[f for f in s.strip().split()[3:8]] for s in open(opts.feature_test).readlines()]

    #print features[0],len(features[0])
    #print test_features
    #print features
    classify_svm(source, target, features, test_features, score)

    #print features[0],len(features[0])
