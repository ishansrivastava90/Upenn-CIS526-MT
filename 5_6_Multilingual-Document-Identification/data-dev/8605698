প্রোগ্রামিং ভাষাগুলিকে তাদের টাইপ ব্যবস্থাগুলির ওপর ভিত্তি করে শ্রেণীবিভাগ করা যায়। In contrast, an untyped language, such as most Forth. Once data has been specified, the machine must be instructed to perform operations on the data.  The execution semantics of a language defines how and when the various constructs of a language should produce a program behavior. For example, the semantics may define the strategy by which expressions are evaluated to values, or the manner in which control structures conditionally execute statements. The specification of a programming language is intended to provide a definition that language users and implementors can use to interpret the behavior of programs when reading their source code. The output of a compiler may be executed by hardware or a program called an interpreter.  In some implementations that make use of the interpreter approach there is no distinct boundary between compiling and interpreting.  For instance, some implementations of the BASIC programming language compile and then execute the source a line at a time. Programs that are executed directly on the hardware usually run several orders of magnitude faster than those that are interpreted in software. One technique for improving the performance of interpreted programs is just-in-time compilation.  Here the virtual machine monitors which sequences of bytecode are frequently executed and translates them to machine code for direct execution on the hardware. The 1960s and 1970s also saw expansion of techniques that reduced the footprint of a program as well as improved productivity of the programmer and user. The card deck for an early 4GL was a lot smaller for the same functionality expressed in a 3GL deck. The rapid growth of the Java came to be used for server-side programming.  These developments were not fundamentally novel, rather they were refinements to existing languages and paradigms, and largely based on the C family of programming languages. There is no overarching classification scheme for programming languages.  A given programming language does not usually have a single ancestor language.  Languages commonly arise by combining the elements of several predecessor languages with new ideas in circulation at the time.  Ideas that originate in one language will diffuse throughout a family of related languages, and then leap suddenly across familial gaps to appear in an entirely different family. A programming language may also be classified by factors unrelated to programming paradigm. For instance, most programming languages use minority do not. Other languages may be classified as being esoteric or not. -->