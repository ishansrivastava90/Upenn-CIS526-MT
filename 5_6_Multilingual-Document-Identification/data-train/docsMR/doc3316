arm compiler ARM processors are designed to best execute code generated by the ARM Compiler ARM Compiler enables the new processor features in all the ARM processors New Profile-Driven Compilation automatically optimizes code based on runtime information  The ARM Compiler supports building of Symbian OS and ARM Linux applications and libraries The latest release of the ARM Compiler reduces the best codesize by up to an additional 5% and improves the best performance by 10-15%. In addition to the ARM Compiler, the state-of-the-art NEON Vectorizing Compiler, which is part of RealView Development Suite Professional, enables the automatic generation of ARM NEON SIMD code sequences from standard C and C++ code. Using the NEON Vectorizing Compiler can speed-up critical multi-media kernels by 4X, resulting in 2X overall application performance increase. Reducing Risk for Linux Application Development The ABI for the ARM architecture created by the ARM Compiler team is also implemented in the GNU compiler for ARM. This enables the creation and use of libraries that can be shared between development environments. The compatibility between GNU Compiler and the ARM Compiler also means that Linux applications can be built using the ARM Compiler. The ARM Compiler provides your development team with high-quality support and the performance, stability and code size benefits you expect from a quality commercial toolkit. Accurate Code Generation Many algorithms are now automatically generated from mathematical modelling software using floating point representations for data. Therefore, the accuracy of IEEE bit representation and floating point representations is essential for correct operation of the generated code. The default library selected by the ARM Compiler offers a full complement of C/C++ functionality, including C++ exception handling and IEEE 754 floating point support. The compiler can optionally generate code to use either software floating point or any of the ARM hardware floating point units. Independent of the method used, the compiler generates full IEEE 754-compliant code. This means that your application will generate exactly the same data regardless of the target processor, speeding porting from one device to another. Targeting Advanced Maths and DSP-Style Solutions Intrinsic functions provide support for common code sequences or instructions that do not map well onto high-level languages. ETSI intrinsics provide telecom primitives, which are used in a number of example algorithms TI C55 intrinsics provide for support for algorithms written to exploit TI-specific extensions Other intrinsics allow access to all ARM hardware instructions not easily accessible from C, reducing the need to write code in assembly language Where possible, intrinsics are emulated on early processors. Key features of the ARM Compiler and its utilities ELF and DWARF industry standards supported for object file and debug table formats Seamless interworking of ARM, Thumb, and Thumb-2 object code Scatter-loading feature supports placement of code and data within sophisticated target memory maps Automatic removal of unreferenced code areas Link-time code generation enabling global cross file optimization Image Conversion Tool Converts from ELF images into other formats that are downloadable or suitable for various Flash utilities Binary, Motorola 32-bit S-record, Intel Hex-32 and Byte Oriented Hex formats are supported Displays information about the input file, e.g. disassembly output or symbol listings ARM Object File Librarian/Archiver Enables sets of ELF object files to be collected together and maintained in libraries Supports merging of libraries C and C++ Libraries