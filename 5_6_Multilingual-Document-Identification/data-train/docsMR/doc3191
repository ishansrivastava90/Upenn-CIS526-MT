El codi de PD és la base de les extensions MSP de David Zicarelli al llenguatge Max per a fer un procés d'audio en software. Com Max, PD té una base modular de codi amb extrems o objectes que són utilitzats com a blocs de construcció per a programes escrits en el software. Això fa el programa arbitrariament extensible a través d'una API pública, i alenta als desenvolupadors a afegir les seves pròpies rutines d'audio i control, ja sigui en el llenguatge de programació C o, amb l'ajuda d'altres externs, en Pyton, Javascript, Ruby, i potencialment també altres llenguatges. El PD, però, és un llenguatge de programació en si mateix. Unitats de codi modulars i reusables, escrites nativament en PD, anomenades "pegats" o "abstraccions" són utilitzades com a programes independents i compartides lliurement entre la comunitat d'usuaris de PD, i cap altre habilitat de programació és requerida per a utilitzar PD efectivament. Adicionalment, PD està dissenyat nativament per a permetre col·laboració en viu a través de xarxes o d'internet, permetent a músics connectats via LAN, o inclús en distintes perts del món, fer música junts en temps real. Les unitats a on es programa el codi s'anomenen "patch" o abstraccions, són utilitzades com programes independents i compartits lliurement entre la comunitat d'usuaris de Pd. Els patchs consten de diferents objectes interconnectats entre ells.  A la part superior trobem les entrades de les capses a on s'envien els valors numèrics o altres tipus de dades, i a la part inferior, les sortides de les mateixes. També existeix la possibilitat de crear patchs secundaris coneguts com subpatchs. Es troben a dins del patch principal. Es creen escribint en un objecte les lletres "pd" seguits d'un espai i el nom que es vulgui donar al subpatch, com es mostra a la figura. Clicant a sobre de l'objecte, se’ns obre la finestra a on trobem el codi del nostre subpatch. El programa té dos estats en els que es pot trobar l'usuari. En mode d'edició o en mode de execució. Per cambiar d'un estat a l'altre, teclejem Ctrl+E. Quan estem al mode d'edició, podem modificar el contingut de les capses, o la connexió entre elles. Al mode d'execució tenim la possibilitat de posar en funcionament tot el patch, i anar modificant valors durant la seva execució quan aquest estigui parat. Podem enviar bangs, modificar el valor de les variables dins dels objectes coneguts com "números", o activar i desactivar sectors del codi amb l'objecte [toggle], activat, quan està amb una creu i desactivat quan no. Un [bang] té com a funció, l'activació de l'acció que té inmediatament connectada després. Una vegada probat el correcte funcionament del Pd, per optimitzar els recursos del programa, carreguem, al start up, les llibreríes més comunes que s'utilitzaran, per evitar haver d'importar-les cada cop que es vulguin utilitzar. D'aquesta manera, al engegar Pd a la teva máquina, ja es carreguen automàticament. Per començar a conèixer l'entorn de Pd, podem obrir els exemples que trobarem als arxius de documentació que hi ha dins de la carpeta de Pd. Aquí trobarem patchs d'àudio i de vídeo per familiaritzar-se amb el programa. Quan volguem crear el nostre propi patch, a la finestra de Pd, anem a File>New i se’ns obre la finestra a on introduïrem els nostres objectes que connectarem entre ells creant així la nostra aplicació. ./configure sudo make sudo make install Quan les dades ja están representades com un paquet dins de Pd, és possible començar a manipular-les.  La llibrería PiDiP són objectes de vídeo que completen la col·lecció d'objectes de PDP. La instal·Lació és idèntica a la de PDP, des del terminal s'executen les  mateixes comandes quedant així llest pel seu ús. També existeix una altra llibrería referent al video anomenada Open CV. És una llibrería oberta desenvolupada per Intel. Proporciona un alt nivell de funcions de processat d'imatges. Permet al programador crear aplicacions en el domini de la visió digital. OpenCV és Open Source per poder funcionar en moltes plataformes. Aquesta llibrería ens permet fer operacions bàsiques, processar imatges, anàlisi de reconeixement del model, anàlisi estructural, reconstrucció 3D i calibració de la càmera, anàlisi de moviment, interfície gràfica i adquisició, etc. Implementa una gran varietat d'eines per la interpretació de la imatge. Com per exemple, detecció de faccions o anàlisi de la forma, entre d'altres.