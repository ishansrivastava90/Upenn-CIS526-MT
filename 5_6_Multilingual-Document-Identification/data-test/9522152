Typischerweise kann die Präsentationsschicht nur einfache abstrakte Datentypen enthält. Daher muss die Anwendungslogik die aus der Domänenschicht kommenden Daten für die einfacher gehaltene Präsentationsschicht übersetzen. Umgekehrt ist sie dafür verantwortlich, die vom Nutzer eingegebenen Daten in geeigneter Form in die Domäne einzubringen. Um die Programmierung von Nutzeroberflächen zu erleichtern kann an dieser Stelle das Anwendungsfassade-Muster eingesetzt werden. Die Idee, die hinter der Anwendungsfassade steckt, ist im Grunde recht simpel. Genau wie die Fassade eines Hauses versteckt sie das komplizierte Gerippe, das die eigentliche Substanz bildet. Dabei erzeugt sie eine logische Sichtweise. Da man auf ein Geschäftsmodell meist viele Sichtweisen haben kann, gibt es häufig mehr als nur eine Anwendungsfassade. Der Trick ist einzelne Teile aus der Domänenschicht so zusammenzubringen und verfügbar zu machen, dass ein logisches Abbild entsteht. Martin Fowler nennt die Getter versteht. Diese Methode hat demnach die Aufgabe den aktuellen Wert eines Attributs aus der Domänenschicht zu holen und zurückzugeben. In manchen Fällen kann diese Aufgabe wesentlich komplizierter sein, als es auf den ersten Blick scheint. Natürlich muss eine Anwendungsfassade auch Methoden zur Manipulation der Attribute anbieten, sogenannte update methods. Diese Setter können ebenfalls eine sehr hohe Komplexität erreichen. Nicht selten erfordern sie beachtlichen Einsatz. Zwischen den Objekten der Domänenschicht bestehen viele Beziehungen, gerade deshalb setzt man ja die Anwendungsfassade ein. Wird nun eines dieser Objekte verändert, so müssen auch abhängige Objekte unter Umständen aktualisiert werden. Offensichtlich muss nun auch dafür gesorgt werden, dass die Einstufung des Kunden automatisch aktualisiert wird. Alternativ könnte auch die Einstufung als nicht aktuell markiert und bei der nächsten Abfrage auf den neuesten Stand gebracht werden. Werden Daten in die Domänenschicht eingebracht, also Werte von Objekten verändert, muss sichergestellt werden, dass diese Daten auch plausibel sind. In einfachen Fällen kann es ausreichen für qualitative Merkmalstypen eine Liste mit möglichen Ausprägungen und für quantitative Merkmale Grenzen bereitzuhalten. Dies geschieht in Form einer legal values method. Die Validierungsmethode überprüft dann einfach ob der gegebene Wert in der Liste der erlaubten Werte aufgeführt ist, beziehungsweise ob er innerhalb der vorgegebenen Grenzen liegt. Manchmal ist die Überprüfung auf Zulässigkeit aber auch nicht ganz so einfach, beispielsweise wenn es sich um Datumsangaben handelt. Schließlich gehört zur Anwendungsfassade noch eine sogenannte default method. Hinter ihr verbirgt sich ein wirkungsvoller Trick zur weiteren Reduktion der Komplexität. Belegt man einen Datensatz beim Anlegen zunächst mit Standardwerten, dann kann man beim Einpflegen der initialen Werte einfach auf die Update-Methode zurück greifen. Die Umsetzung der Standardwerte-Methode ist sehr einfach, sie ist im Grunde eine spezieller Getter. So lässt sich das System ohne großen Aufwand vereinfachen. Der Einsatz mehrerer Anwendungsfassaden bietet weitere Möglichkeiten die Architektur der Anwendung zu verbessern. Verwendet eine Ansicht der Präsentationsschicht Informationen aus mehreren Fassaden, kann sie dem Anwender völlig neue Darstellungen zur Verfügung stellen. Auch Vererbung kann bei Fassaden sinnvoll eingesetzt werden. In unserem Beispiel einer Banken-Software existiert wahrscheinlich eine Anwendungsfassade „Customer“, „ClassifiedCustomer“ ist also nur eine Spezialisierung. Solche Vorgehensweisen verbessern das System zusätzlich hinsichtlich Flexibilität und Stabilität. Das detaillierte Beispiel geht auf die Einzelheiten der Methodik ein und zeigt die Verwendung von Modultests. Zur kompletten Implementierung fehlen trotz vieler Bruchstücke einige Teile. Bei einer teilweisen Implementierung des Beispiel-Programmes in Python konnte gezeigt werden, dass mit Fowlers Ansatz sogar die Umsetzung in ein zur Laufzeit rekonfigurierbares Programm möglich ist.