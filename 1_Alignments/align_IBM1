#!/usr/bin/env python
import optparse
import sys
from collections import defaultdict
import pickle


optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
optparser.add_option("-i", "--iterations", dest="iters", default=25, type="int", help="Number of iterations for EM algorithm")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

#sys.stderr.write("Training IBM Model1 ...\n")

# Do Pre-processing
bitext = [[sentence.lower().strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))[:opts.num_sents]]

#sys.stderr.write("Initializing translation prob. to uniform ...\n")

f_total = defaultdict(int)
e_total = defaultdict(int)
f_total[None] = 1
for (n, (f, e)) in enumerate(bitext):
    for f_i in set(f):
        f_total[f_i] += 1
    for e_j in set(e):
        e_total[e_j] += 1

len_f = len(f_total.keys())

prob_e_f = defaultdict(float)
prev_prob_e_f = defaultdict(float)
for (n, (f1, e)) in enumerate(bitext):
    f = [None] + f1
    for f_i in set(f):
        for e_j in set(e):
            prob_e_f[(e_j,f_i)] = 1/float(len_f)
            prev_prob_e_f[(e_j,f_i)] = 0


#sys.stderr.write("Running the EM algorithm to find translation prob ...\n")
converged = 0
iteration = 1

while converged == 0 and iteration <= opts.iters:

    sys.stderr.write("Running iteration num %i...\n" % iteration)

    fe_count = defaultdict(float)
    norm = defaultdict(float)

    for (n, (f1, e)) in enumerate(bitext):
       f = [None] + f1
       for e_j in set(e):
           for f_i in set(f):
               f_total[f_i] = 0
               fe_count[(f_i, e_j)] = 0

    #Compute Normalization
    for (n, (f1, e)) in enumerate(bitext):
        f = [None] + f1

        for e_j in set(e):
            norm[e_j] = 0.0
            for f_i in set(f):
                norm[e_j] += prob_e_f[(e_j, f_i)]

        for e_j in set(e):
            for f_i in set(f):
                fe_count[(e_j, f_i)] += float(prob_e_f[(e_j, f_i)])/norm[e_j]
                f_total[f_i] += float(prob_e_f[(e_j, f_i)])/norm[e_j]


    converged = 1
    for (n, (f1, e)) in enumerate(bitext):
        f = [None] + f1
        for f_i in set(f):
            for e_j in set(e):
                prob_e_f[(e_j, f_i)] = float(fe_count[(e_j, f_i)])/f_total[f_i]

                #Convergence Check
                if converged == 1 and abs(prob_e_f[(e_j, f_i)] - prev_prob_e_f[(e_j, f_i)]) < 0.00000001:
                    converged = 0
                prev_prob_e_f[(e_j, f_i)] = prob_e_f[(e_j, f_i)]

    iteration += 1


pickle.dump(prob_e_f, open("trans_probabilities/translationProb_IBM1_withNull.p","wb"))

# Printing the alignments
for (f, e) in bitext:
    for (i, f_i) in enumerate(f):
        for (j, e_j) in enumerate(e):
            if prob_e_f[(e_j, f_i)] >= opts.threshold:
                sys.stdout.write("%i-%i " % (i,j))
    sys.stdout.write("\n")

